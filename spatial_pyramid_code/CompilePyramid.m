function [ pyramid_all class_label_all ] = CompilePyramid( imageFileList, dataBaseDir, textonSuffix, dictionarySize, numTextonImages, pyramidLevels, canSkip, ext_param_1, ext_param_2, ext_param_3, ext_param_4, ext_param_5 )
%function [ pyramid_all ] = CompilePyramid( imageFileList, dataBaseDir, textonSuffix, dictionarySize, pyramidLevels, canSkip )
%
% Generate the pyramid from the texton lablels
%
% For each image the texton labels are loaded. Then the histograms are
% calculated for the finest level. The rest of the pyramid levels are
% generated by combining the histograms of the higher level.
%
% imageFileList: cell of file paths
% dataBaseDir: the base directory for the data files that are generated
%  by the algorithm. If this dir is the same as imageBaseDir the files
%  will be generated in the same location as the image file
% textonSuffix: this is the suffix appended to the image file name to
%  denote the data file that contains the textons indices and coordinates. 
%  Its default value is '_texton_ind_%d.mat' where %d is the dictionary
%  size.
% dictionarySize: size of descriptor dictionary (200 has been found to be
%  a good size)
% pyramidLevels: number of levels of the pyramid to build
% canSkip: if true the calculation will be skipped if the appropriate data 
%  file is found in dataBaseDir. This is very useful if you just want to
%  update some of the data or if you've added new images.

fprintf('Building Spatial Pyramid\n\n');

%% parameters

if(nargin<4)
    dictionarySize = 200
end

if(nargin<5)
    pyramidLevels = 4
end

if (nargin<6)
    numTextonImages = 50
end

if(nargin<7)
    canSkip = 0
end

binsHigh = 2^(pyramidLevels-1);

pyramid_all = [];
class_label_all = [];


%% Check cache
outFName = fullfile(dataBaseDir, sprintf('pyramids_all_%d_%d_%d_ext_%d_%d_%d_%d_%d.mat', dictionarySize, numTextonImages, pyramidLevels, ext_param_1, ext_param_2, ext_param_3, ext_param_4, ext_param_5));
if (size(dir(outFName), 1) ~= 0)
    fprintf('Loading full pyramid cache...');
    load(outFName, 'pyramid_all', 'class_label_all');
    return;
end

for f = 1:size(imageFileList,1)


    %% load image
    imageFName = imageFileList{f};
    [dirN base] = fileparts(imageFName);
    baseFName = fullfile(dirN, base);
    
    outFName = fullfile(dataBaseDir, sprintf('%s_pyramid_%d_%d_%d_ext_%d_%d_%d_%d_%d.mat', baseFName, dictionarySize, numTextonImages, pyramidLevels, ext_param_1, ext_param_2, ext_param_3, ext_param_4, ext_param_5));

    if(size(dir(outFName),1)~=0 && canSkip)
        fprintf('Skipping %s\n', imageFName);
        load(outFName, 'pyramid', 'class_label');
        pyramid_all = [pyramid_all; pyramid];
        
        class_label_all = [class_label_all; class_label];
        continue;
    end
    
    %% load texton indices
    in_fname = fullfile(dataBaseDir, sprintf('%s%s', baseFName, textonSuffix));
    load(in_fname, 'texton_ind');
    
    %% get width and height of input image
    wid = texton_ind.wid;
    hgt = texton_ind.hgt;

    fprintf('Loaded %s: wid %d, hgt %d\n', ...
             imageFName, wid, hgt);

    %% compute histogram at the finest level
    pyramid_cell = cell(pyramidLevels,1);
    pyramid_cell{1} = zeros(binsHigh, binsHigh, dictionarySize);

    for i=1:binsHigh
        for j=1:binsHigh

            % find the coordinates of the current bin
            x_lo = floor(wid/binsHigh * (i-1));
            x_hi = floor(wid/binsHigh * i);
            y_lo = floor(hgt/binsHigh * (j-1));
            y_hi = floor(hgt/binsHigh * j);
            
            texton_patch = texton_ind.data( (texton_ind.x > x_lo) & (texton_ind.x <= x_hi) & ...
                                            (texton_ind.y > y_lo) & (texton_ind.y <= y_hi));
            
            % make histogram of features in bin
            pyramid_cell{1}(i,j,:) = hist(texton_patch, 1:dictionarySize)./length(texton_ind.data);
        end
    end

    %% compute histograms at the coarser levels
    num_bins = binsHigh/2;
    for l = 2:pyramidLevels
        pyramid_cell{l} = zeros(num_bins, num_bins, dictionarySize);
        for i=1:num_bins
            for j=1:num_bins
                pyramid_cell{l}(i,j,:) = ...
                pyramid_cell{l-1}(2*i-1,2*j-1,:) + pyramid_cell{l-1}(2*i,2*j-1,:) + ...
                pyramid_cell{l-1}(2*i-1,2*j,:) + pyramid_cell{l-1}(2*i,2*j,:);
            end
        end
        num_bins = num_bins/2;
    end

    %% stack all the histograms with appropriate weights
    pyramid = [];
    for l = 1:pyramidLevels-1
        pyramid = [pyramid pyramid_cell{l}(:)' .* 2^(-l)];
    end
    pyramid = [pyramid pyramid_cell{pyramidLevels}(:)' .* 2^(1-pyramidLevels)];

    class_label = get_class_label(base);
    
    % save pyramid
    save(outFName, 'pyramid', 'class_label');

    pyramid_all = [pyramid_all; pyramid];

    class_label_all = [class_label_all; class_label];
end % f

outFName = fullfile(dataBaseDir, sprintf('pyramids_all_%d_%d_%d_ext_%d_%d_%d_%d_%d.mat', dictionarySize, numTextonImages, pyramidLevels, ext_param_1, ext_param_2, ext_param_3, ext_param_4, ext_param_5));
save(outFName, 'pyramid_all', 'class_label_all');


end

function [class_label] = get_class_label(filename)
underscores = find(filename=='_');
if (length(underscores) < 3)
    class_label = -1;
else
    filename_prefix = filename(1:underscores(3)-1);
    
    % for scene categries
    if (strcmp(filename_prefix, 'scene_category_bedroom'))
        class_label = 0;
    elseif (strcmp(filename_prefix, 'scene_category_CALsuburb'))
        class_label = 1;
    elseif (strcmp(filename_prefix, 'scene_category_industrial'))
        class_label = 2;
    elseif (strcmp(filename_prefix, 'scene_category_kitchen'))
        class_label = 3;
    elseif (strcmp(filename_prefix, 'scene_category_livingroom'))
        class_label = 4;
    elseif (strcmp(filename_prefix, 'scene_category_MITcoast'))
        class_label = 5;
    elseif (strcmp(filename_prefix, 'scene_category_MITforest'))
        class_label = 6;
    elseif (strcmp(filename_prefix, 'scene_category_MIThighway'))
        class_label = 7;
    elseif (strcmp(filename_prefix, 'scene_category_MITinsidecity'))
        class_label = 8;
    elseif (strcmp(filename_prefix, 'scene_category_MITmountain'))
        class_label = 9;
    elseif (strcmp(filename_prefix, 'scene_category_MITopencountry'))
        class_label = 10;
    elseif (strcmp(filename_prefix, 'scene_category_MITstreet'))
        class_label = 11;
    elseif (strcmp(filename_prefix, 'scene_category_MITtallbuilding'))
        class_label = 12;
    elseif (strcmp(filename_prefix, 'scene_category_PARoffice'))
        class_label = 13;
    elseif (strcmp(filename_prefix, 'scene_category_store'))
        class_label = 14;
    else
        class_label = -1;
    end
end
end
